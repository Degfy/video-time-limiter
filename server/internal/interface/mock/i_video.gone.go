// Code generated by gonectl. DO NOT EDIT.
// Source: i_video.go

package mock

import (
	"github.com/gone-io/gone/v2"
	reflect "reflect"
	entity "server/internal/interface/entity"

	gomock "go.uber.org/mock/gomock"
)

// MockIVideo is a mock of IVideo interface.
type MockIVideo struct {
	ctrl     *gomock.Controller
	recorder *MockIVideoMockRecorder
	isgomock struct{}
	gone.Flag
}

// MockIVideoMockRecorder is the mock recorder for MockIVideo.
type MockIVideoMockRecorder struct {
	mock *MockIVideo
}

// NewMockIVideo creates a new mock instance.
func NewMockIVideo(ctrl *gomock.Controller) *MockIVideo {
	mock := &MockIVideo{ctrl: ctrl}
	mock.recorder = &MockIVideoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIVideo) EXPECT() *MockIVideoMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockIVideo) Get(userId string) (*entity.VideoData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", userId)
	ret0, _ := ret[0].(*entity.VideoData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockIVideoMockRecorder) Get(userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIVideo)(nil).Get), userId)
}

// Save mocks base method.
func (m *MockIVideo) Save(userId string, data entity.VideoSubmit) (*entity.VideoData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", userId, data)
	ret0, _ := ret[0].(*entity.VideoData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockIVideoMockRecorder) Save(userId, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockIVideo)(nil).Save), userId, data)
}

// Setting mocks base method.
func (m *MockIVideo) Setting(userId string, setting entity.VideoSetting) (*entity.VideoData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Setting", userId, setting)
	ret0, _ := ret[0].(*entity.VideoData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Setting indicates an expected call of Setting.
func (mr *MockIVideoMockRecorder) Setting(userId, setting any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Setting", reflect.TypeOf((*MockIVideo)(nil).Setting), userId, setting)
}
