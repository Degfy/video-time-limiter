// Code generated by gonectl. DO NOT EDIT.
// Source: i_data.go

package mock

import (
	"github.com/gone-io/gone/v2"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIData is a mock of IData interface.
type MockIData struct {
	ctrl     *gomock.Controller
	recorder *MockIDataMockRecorder
	isgomock struct{}
	gone.Flag
}

// MockIDataMockRecorder is the mock recorder for MockIData.
type MockIDataMockRecorder struct {
	mock *MockIData
}

// NewMockIData creates a new mock instance.
func NewMockIData(ctrl *gomock.Controller) *MockIData {
	mock := &MockIData{ctrl: ctrl}
	mock.recorder = &MockIDataMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIData) EXPECT() *MockIDataMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockIData) Get(key string, pv any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key, pv)
	ret0, _ := ret[0].(error)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockIDataMockRecorder) Get(key, pv any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIData)(nil).Get), key, pv)
}

// Put mocks base method.
func (m *MockIData) Put(key string, value any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put.
func (mr *MockIDataMockRecorder) Put(key, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockIData)(nil).Put), key, value)
}
